// Code generated by immutable tool. DO NOT EDIT.

package data

import (
	"github.com/gostdlib/base/values/immutable"

	"fmt"
	"io"
)

// ImNonGeneric is an immutable version of NonGeneric.
type ImNonGeneric struct {
	id         uint64
	name       string
	tags       immutable.Map[string, struct{}]
	slices     immutable.Slice[int]
	private    string
	privatePtr *string
	publicPtr  *string
	inter      io.Writer
}

// GetID retrieves the content of the field ID.
func (r *ImNonGeneric) GetID() uint64 {
	return r.id
}

// SetID returns a copy of the struct with the field ID set to the new value.
func (r *ImNonGeneric) SetID(value uint64) ImNonGeneric {
	n := copyImNonGeneric(*r)
	n.id = value
	return n
}

// GetName retrieves the content of the field Name.
func (r *ImNonGeneric) GetName() string {
	return r.name
}

// SetName returns a copy of the struct with the field Name set to the new value.
func (r *ImNonGeneric) SetName(value string) ImNonGeneric {
	n := copyImNonGeneric(*r)
	n.name = value
	return n
}

// GetTags retrieves the content of the field Tags.
func (r *ImNonGeneric) GetTags() immutable.Map[string, struct{}] {
	return r.tags
}

// SetTags returns a copy of the struct with the field Tags set to the new value.
func (r *ImNonGeneric) SetTags(value immutable.Map[string, struct{}]) ImNonGeneric {
	n := copyImNonGeneric(*r)
	n.tags = value
	return n
}

// GetSlices retrieves the content of the field Slices.
func (r *ImNonGeneric) GetSlices() immutable.Slice[int] {
	return r.slices
}

// SetSlices returns a copy of the struct with the field Slices set to the new value.
func (r *ImNonGeneric) SetSlices(value immutable.Slice[int]) ImNonGeneric {
	n := copyImNonGeneric(*r)
	n.slices = value
	return n
}

// GetPublicPtr retrieves the content of the field PublicPtr.
func (r *ImNonGeneric) GetPublicPtr() *string {
	return r.publicPtr
}

// SetPublicPtr returns a copy of the struct with the field PublicPtr set to the new value.
func (r *ImNonGeneric) SetPublicPtr(value *string) ImNonGeneric {
	n := copyImNonGeneric(*r)
	n.publicPtr = value
	return n
}

// Mutable converts the immutable struct back to the original mutable struct.
func (r *ImNonGeneric) Mutable() NonGeneric {
	return NonGeneric{
		ID:         r.id,
		Name:       r.name,
		Tags:       r.tags.Copy(),
		Slices:     r.slices.Copy(),
		private:    r.private,
		privatePtr: r.privatePtr,
		PublicPtr:  r.publicPtr,
		inter:      r.inter,
	}
}

// Immutable converts the mutable struct to the generated immutable struct.
func (r *NonGeneric) Immutable() ImNonGeneric {
	return ImNonGeneric{
		id:         (r.ID),
		name:       (r.Name),
		tags:       immutable.NewMap[string, struct{}](r.Tags),
		slices:     immutable.NewSlice[int](r.Slices),
		private:    (r.private),
		privatePtr: (r.privatePtr),
		publicPtr:  (r.PublicPtr),
		inter:      (r.inter),
	}
}

func copyImNonGeneric(s ImNonGeneric) ImNonGeneric {
	return s
}

// String is a copy of the original method from NonGeneric.
func (r *ImNonGeneric) String() string {
	return fmt.Sprintf("%+v", "NonGeneric")
}

// privateMethod is a copy of the original method from NonGeneric.
func (r *ImNonGeneric) privateMethod() string {
	return fmt.Sprintf("%+v", "private method")
}

// DoNotHavePtrReceiver is a copy of the original method from NonGeneric.
func (r ImNonGeneric) DoNotHavePtrReceiver() string {
	return fmt.Sprintf("%+v", "okay")
}
