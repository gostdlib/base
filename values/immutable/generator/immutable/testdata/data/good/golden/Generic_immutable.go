
// Code generated by immutable tool. DO NOT EDIT.

package data

import (
	"github.com/gostdlib/base/values/immutable"

	"fmt"
)

// ImGeneric[T any, X comparable] is an immutable version of Generic[T any, X comparable].
// Record comment.
type ImGeneric[T any, X comparable] struct {
	id uint64 // ID comment.
	name string
	email string
	tags immutable.Map[string, struct{}]
	slicesGeneric immutable.Slice[T]
	slices immutable.Slice[int]
	subData T
	comp X
	private string
}

// GetID retrieves the content of the field ID.
// ID comment.
func (r *ImGeneric[T, X]) GetID() uint64 {
	return r.id
}

// SetID returns a copy of the struct with the field ID set to the new value.
// ID comment.
func (r *ImGeneric[T, X]) SetID(value uint64) ImGeneric[T, X] {
	n := copyImGeneric[T, X](*r)
	n.id = value
	return n
}
// GetName retrieves the content of the field Name.
func (r *ImGeneric[T, X]) GetName() string {
	return r.name
}

// SetName returns a copy of the struct with the field Name set to the new value.
func (r *ImGeneric[T, X]) SetName(value string) ImGeneric[T, X] {
	n := copyImGeneric[T, X](*r)
	n.name = value
	return n
}
// GetEmail retrieves the content of the field Email.
func (r *ImGeneric[T, X]) GetEmail() string {
	return r.email
}

// SetEmail returns a copy of the struct with the field Email set to the new value.
func (r *ImGeneric[T, X]) SetEmail(value string) ImGeneric[T, X] {
	n := copyImGeneric[T, X](*r)
	n.email = value
	return n
}
// GetTags retrieves the content of the field Tags.
func (r *ImGeneric[T, X]) GetTags() immutable.Map[string, struct{}] {
	return r.tags
}

// SetTags returns a copy of the struct with the field Tags set to the new value.
func (r *ImGeneric[T, X]) SetTags(value immutable.Map[string, struct{}]) ImGeneric[T, X] {
	n := copyImGeneric[T, X](*r)
	n.tags = value
	return n
}
// GetSlicesGeneric retrieves the content of the field SlicesGeneric.
func (r *ImGeneric[T, X]) GetSlicesGeneric() immutable.Slice[T] {
	return r.slicesGeneric
}

// SetSlicesGeneric returns a copy of the struct with the field SlicesGeneric set to the new value.
func (r *ImGeneric[T, X]) SetSlicesGeneric(value immutable.Slice[T]) ImGeneric[T, X] {
	n := copyImGeneric[T, X](*r)
	n.slicesGeneric = value
	return n
}
// GetSlices retrieves the content of the field Slices.
func (r *ImGeneric[T, X]) GetSlices() immutable.Slice[int] {
	return r.slices
}

// SetSlices returns a copy of the struct with the field Slices set to the new value.
func (r *ImGeneric[T, X]) SetSlices(value immutable.Slice[int]) ImGeneric[T, X] {
	n := copyImGeneric[T, X](*r)
	n.slices = value
	return n
}
// GetSubData retrieves the content of the field SubData.
func (r *ImGeneric[T, X]) GetSubData() T {
	return r.subData
}

// SetSubData returns a copy of the struct with the field SubData set to the new value.
func (r *ImGeneric[T, X]) SetSubData(value T) ImGeneric[T, X] {
	n := copyImGeneric[T, X](*r)
	n.subData = value
	return n
}
// GetComp retrieves the content of the field Comp.
func (r *ImGeneric[T, X]) GetComp() X {
	return r.comp
}

// SetComp returns a copy of the struct with the field Comp set to the new value.
func (r *ImGeneric[T, X]) SetComp(value X) ImGeneric[T, X] {
	n := copyImGeneric[T, X](*r)
	n.comp = value
	return n
}

// Mutable converts the immutable struct back to the original mutable struct.
func (r *ImGeneric[T, X]) Mutable() Generic[T, X] {
	return Generic[T, X]{
		ID: r.id,
		Name: r.name,
		Email: r.email,
		Tags: r.tags.Copy(),
		SlicesGeneric: r.slicesGeneric.Copy(),
		Slices: r.slices.Copy(),
		SubData: r.subData,
		Comp: r.comp,
		private: r.private,
	}
}

// Immutable converts the mutable struct to the generated immutable struct.
func (r *Generic[T, X]) Immutable() ImGeneric[T, X] {
	return ImGeneric[T, X]{
		id: (r.ID),
		name: (r.Name),
		email: (r.Email),
		tags: immutable.NewMap[string, struct{}](r.Tags),
		slicesGeneric: immutable.NewSlice[T](r.SlicesGeneric),
		slices: immutable.NewSlice[int](r.Slices),
		subData: (r.SubData),
		comp: (r.Comp),
		private: (r.private),
	}
}

func copyImGeneric[T any, X comparable](s ImGeneric[T, X]) ImGeneric[T, X] {
	return s
}

// String is a copy of the original method from Generic.
func (r *ImGeneric[T, X]) String() string {
    return fmt.Sprintf("%+v", r)
}

// privateMethod is a copy of the original method from Generic.
func (r *ImGeneric[T, X]) privateMethod() string {
    return fmt.Sprintf("%+v", r)
}
