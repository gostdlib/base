// Package errors provides an errors package for this service. It includes all of the stdlib's
// functions and types.
// YOU MUST RUN GO GENERATE OR THIS PACKAGE WILL NOT COMPILE!!!
package errors

import (
    "github.com/gostdlib/base/context"
	"github.com/gostdlib/base/errors"
)

//go:generate stringer -type=Category -linecomment

// Category represents the category of the error.
type Category uint32

func (c Category) Category() string {
	return c.String()
}

// Uncomment if you want to convert a category to a grpc status code.
/*
// Code returns the gRPC status code for the category.
func (c Category) Code() codes.Code {
	return catToCode[c]
}
*/

const (
	// CatUnknown represents an unknown category. This should not be used.
	CatUnknown Category = Category(0) // Unknown
	// ADD YOUR OWN CATEGORIES HERE
)

// Also uncomment if you want to convert a category to a grpc status code.
/*
// catToCode maps a Category to a gRPC status code.
var catToCode = map[Category]codes.Code{
	CatUnknown:           codes.Unknown,
}
*/

//go:generate stringer -type=Type -linecomment

// Type represents the type of the error.
type Type uint16

func (t Type) Type() string {
	return t.String()
}

const (
	// TypeUnknown represents an unknown type.
	TypeUnknown Type = Type(0) // Unknown

	/* ADD YOUR OWN TYPES HERE */
)

// LogAttrer is an interface that can be implemented by an error to return a list of attributes
// used in logging.
type LogAttrer = errors.LogAttrer

// Error is the error type for this service. Error implements github.com/gostdlib/base/errors.E .
type Error = errors.Error

// E creates a new Error with the given parameters.
/* YOU CAN REPLACE this with your own base error constructor. See github.com/gostdlib/base/errors for more info. */
func E(ctx context.Context, c errors.Category, t errors.Type, msg error, options ...errors.EOption) Error {
    return errors.E(ctx, c, t, msg, options...)
}

// Everything below here is a wrapper around the stdlib errors package.
// We do this to prevent having to import the stdlib errors package in every file that needs it.

// New returns an error that formats as the given text.
func New(text string) error {
	return errors.New(text)
}

// Unwrap returns the result of calling the Unwrap method on err, if err's
// type contains an Unwrap method returning error.
// Otherwise, Unwrap returns nil.
func Unwrap(err error) error {
	return errors.Unwrap(err)
}

// Is reports whether any error in err's chain matches target.
func Is(err, target error) bool {
	return errors.Is(err, target)
}

// As finds the first error in err's chain that matches target, and if so, sets
// target to that error value and returns true.
func As(err error, target interface{}) bool {
	return errors.As(err, target)
}

// Join returns an error that wraps the given errors. Any nil error values are discarded.
// Join returns nil if every value in errs is nil. The error formats as the concatenation
// of the strings obtained by calling the Error method of each element of errs, with a newline between each string.
// A non-nil error returned by Join implements the Unwrap() []error method.
func Join(err ...error) error {
	return errors.Join(err...)
}
